//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18444
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SyncWorldServiceTEST.ServiceReferenceV1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PersonSet", Namespace="http://schemas.datacontract.org/2004/07/SyncWorldDAO")]
    [System.SerializableAttribute()]
    public partial class PersonSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] ContributionSetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] EventSetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NickNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] ContributionSets {
            get {
                return this.ContributionSetsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContributionSetsField, value) != true)) {
                    this.ContributionSetsField = value;
                    this.RaisePropertyChanged("ContributionSets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] EventSets {
            get {
                return this.EventSetsField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSetsField, value) != true)) {
                    this.EventSetsField = value;
                    this.RaisePropertyChanged("EventSets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NickName {
            get {
                return this.NickNameField;
            }
            set {
                if ((object.ReferenceEquals(this.NickNameField, value) != true)) {
                    this.NickNameField = value;
                    this.RaisePropertyChanged("NickName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonId {
            get {
                return this.PersonIdField;
            }
            set {
                if ((this.PersonIdField.Equals(value) != true)) {
                    this.PersonIdField = value;
                    this.RaisePropertyChanged("PersonId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContributionSet", Namespace="http://schemas.datacontract.org/2004/07/SyncWorldDAO")]
    [System.SerializableAttribute()]
    public partial class ContributionSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContributionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventEventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.EventSet EventSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonPersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.PersonSet PersonSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string QuantityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContributionId {
            get {
                return this.ContributionIdField;
            }
            set {
                if ((this.ContributionIdField.Equals(value) != true)) {
                    this.ContributionIdField = value;
                    this.RaisePropertyChanged("ContributionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventEventId {
            get {
                return this.EventEventIdField;
            }
            set {
                if ((this.EventEventIdField.Equals(value) != true)) {
                    this.EventEventIdField = value;
                    this.RaisePropertyChanged("EventEventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.EventSet EventSet {
            get {
                return this.EventSetField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSetField, value) != true)) {
                    this.EventSetField = value;
                    this.RaisePropertyChanged("EventSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonPersonId {
            get {
                return this.PersonPersonIdField;
            }
            set {
                if ((this.PersonPersonIdField.Equals(value) != true)) {
                    this.PersonPersonIdField = value;
                    this.RaisePropertyChanged("PersonPersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.PersonSet PersonSet {
            get {
                return this.PersonSetField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonSetField, value) != true)) {
                    this.PersonSetField = value;
                    this.RaisePropertyChanged("PersonSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Quantity {
            get {
                return this.QuantityField;
            }
            set {
                if ((object.ReferenceEquals(this.QuantityField, value) != true)) {
                    this.QuantityField = value;
                    this.RaisePropertyChanged("Quantity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventSet", Namespace="http://schemas.datacontract.org/2004/07/SyncWorldDAO")]
    [System.SerializableAttribute()]
    public partial class EventSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.AdressSet AdressSetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Adress_AdressIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] ContributionSetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EventIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PersonPersonIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.PersonSet[] PersonSetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.AdressSet AdressSet {
            get {
                return this.AdressSetField;
            }
            set {
                if ((object.ReferenceEquals(this.AdressSetField, value) != true)) {
                    this.AdressSetField = value;
                    this.RaisePropertyChanged("AdressSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Adress_AdressId {
            get {
                return this.Adress_AdressIdField;
            }
            set {
                if ((this.Adress_AdressIdField.Equals(value) != true)) {
                    this.Adress_AdressIdField = value;
                    this.RaisePropertyChanged("Adress_AdressId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] ContributionSets {
            get {
                return this.ContributionSetsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContributionSetsField, value) != true)) {
                    this.ContributionSetsField = value;
                    this.RaisePropertyChanged("ContributionSets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PersonPersonId {
            get {
                return this.PersonPersonIdField;
            }
            set {
                if ((this.PersonPersonIdField.Equals(value) != true)) {
                    this.PersonPersonIdField = value;
                    this.RaisePropertyChanged("PersonPersonId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.PersonSet[] PersonSets {
            get {
                return this.PersonSetsField;
            }
            set {
                if ((object.ReferenceEquals(this.PersonSetsField, value) != true)) {
                    this.PersonSetsField = value;
                    this.RaisePropertyChanged("PersonSets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Status {
            get {
                return this.StatusField;
            }
            set {
                if ((this.StatusField.Equals(value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AdressSet", Namespace="http://schemas.datacontract.org/2004/07/SyncWorldDAO")]
    [System.SerializableAttribute()]
    public partial class AdressSet : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdressIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] EventSetsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StreetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdressId {
            get {
                return this.AdressIdField;
            }
            set {
                if ((this.AdressIdField.Equals(value) != true)) {
                    this.AdressIdField = value;
                    this.RaisePropertyChanged("AdressId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] EventSets {
            get {
                return this.EventSetsField;
            }
            set {
                if ((object.ReferenceEquals(this.EventSetsField, value) != true)) {
                    this.EventSetsField = value;
                    this.RaisePropertyChanged("EventSets");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Street {
            get {
                return this.StreetField;
            }
            set {
                if ((object.ReferenceEquals(this.StreetField, value) != true)) {
                    this.StreetField = value;
                    this.RaisePropertyChanged("Street");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ZipCodeField, value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceV1.ISyncWolrdService")]
    public interface ISyncWolrdService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/AddPersonResponse")]
        string AddPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/AddPersonResponse")]
        System.Threading.Tasks.Task<string> AddPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdatePerson", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdatePersonResponse")]
        string UpdatePerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdatePerson", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdatePersonResponse")]
        System.Threading.Tasks.Task<string> UpdatePersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeletePerson", ReplyAction="http://tempuri.org/ISyncWolrdService/DeletePersonResponse")]
        string DeletePerson(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeletePerson", ReplyAction="http://tempuri.org/ISyncWolrdService/DeletePersonResponse")]
        System.Threading.Tasks.Task<string> DeletePersonAsync(string mail);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/AddEventResponse")]
        string AddEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/AddEventResponse")]
        System.Threading.Tasks.Task<string> AddEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdateEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdateEventResponse")]
        string UpdateEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdateEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdateEventResponse")]
        System.Threading.Tasks.Task<string> UpdateEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteEventResponse")]
        string DeleteEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteEventResponse")]
        System.Threading.Tasks.Task<string> DeleteEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/EventExistByName", ReplyAction="http://tempuri.org/ISyncWolrdService/EventExistByNameResponse")]
        bool EventExistByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/EventExistByName", ReplyAction="http://tempuri.org/ISyncWolrdService/EventExistByNameResponse")]
        System.Threading.Tasks.Task<bool> EventExistByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/EventExistByDate", ReplyAction="http://tempuri.org/ISyncWolrdService/EventExistByDateResponse")]
        bool EventExistByDate(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/EventExistByDate", ReplyAction="http://tempuri.org/ISyncWolrdService/EventExistByDateResponse")]
        System.Threading.Tasks.Task<bool> EventExistByDateAsync(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetEventBetweenDate", ReplyAction="http://tempuri.org/ISyncWolrdService/GetEventBetweenDateResponse")]
        SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] GetEventBetweenDate(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetEventBetweenDate", ReplyAction="http://tempuri.org/ISyncWolrdService/GetEventBetweenDateResponse")]
        System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.EventSet[]> GetEventBetweenDateAsync(System.DateTime d1, System.DateTime d2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteAllClosedEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteAllClosedEventResponse")]
        string DeleteAllClosedEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteAllClosedEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteAllClosedEventResponse")]
        System.Threading.Tasks.Task<string> DeleteAllClosedEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdateAllEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdateAllEventResponse")]
        string UpdateAllEvent();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdateAllEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdateAllEventResponse")]
        System.Threading.Tasks.Task<string> UpdateAllEventAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddPersonToEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/AddPersonToEventResponse")]
        string AddPersonToEvent(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddPersonToEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/AddPersonToEventResponse")]
        System.Threading.Tasks.Task<string> AddPersonToEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetAllEventForPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/GetAllEventForPersonResponse")]
        SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] GetAllEventForPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetAllEventForPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/GetAllEventForPersonResponse")]
        System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.EventSet[]> GetAllEventForPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetAllContribForEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/GetAllContribForEventResponse")]
        SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] GetAllContribForEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetAllContribForEvent", ReplyAction="http://tempuri.org/ISyncWolrdService/GetAllContribForEventResponse")]
        System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[]> GetAllContribForEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetAllContribForPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/GetAllContribForPersonResponse")]
        SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] GetAllContribForPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/GetAllContribForPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/GetAllContribForPersonResponse")]
        System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[]> GetAllContribForPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteAllContribForPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteAllContribForPersonResponse")]
        string DeleteAllContribForPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteAllContribForPerson", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteAllContribForPersonResponse")]
        System.Threading.Tasks.Task<string> DeleteAllContribForPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddContrib", ReplyAction="http://tempuri.org/ISyncWolrdService/AddContribResponse")]
        string AddContrib(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/AddContrib", ReplyAction="http://tempuri.org/ISyncWolrdService/AddContribResponse")]
        System.Threading.Tasks.Task<string> AddContribAsync(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdateContrib", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdateContribResponse")]
        string UpdateContrib(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/UpdateContrib", ReplyAction="http://tempuri.org/ISyncWolrdService/UpdateContribResponse")]
        System.Threading.Tasks.Task<string> UpdateContribAsync(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteContrib", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteContribResponse")]
        string DeleteContrib(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISyncWolrdService/DeleteContrib", ReplyAction="http://tempuri.org/ISyncWolrdService/DeleteContribResponse")]
        System.Threading.Tasks.Task<string> DeleteContribAsync(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISyncWolrdServiceChannel : SyncWorldServiceTEST.ServiceReferenceV1.ISyncWolrdService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SyncWolrdServiceClient : System.ServiceModel.ClientBase<SyncWorldServiceTEST.ServiceReferenceV1.ISyncWolrdService>, SyncWorldServiceTEST.ServiceReferenceV1.ISyncWolrdService {
        
        public SyncWolrdServiceClient() {
        }
        
        public SyncWolrdServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SyncWolrdServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncWolrdServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SyncWolrdServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.AddPerson(p);
        }
        
        public System.Threading.Tasks.Task<string> AddPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.AddPersonAsync(p);
        }
        
        public string UpdatePerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.UpdatePerson(p);
        }
        
        public System.Threading.Tasks.Task<string> UpdatePersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.UpdatePersonAsync(p);
        }
        
        public string DeletePerson(string mail) {
            return base.Channel.DeletePerson(mail);
        }
        
        public System.Threading.Tasks.Task<string> DeletePersonAsync(string mail) {
            return base.Channel.DeletePersonAsync(mail);
        }
        
        public string AddEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.AddEvent(e);
        }
        
        public System.Threading.Tasks.Task<string> AddEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.AddEventAsync(e);
        }
        
        public string UpdateEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.UpdateEvent(e);
        }
        
        public System.Threading.Tasks.Task<string> UpdateEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.UpdateEventAsync(e);
        }
        
        public string DeleteEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.DeleteEvent(e);
        }
        
        public System.Threading.Tasks.Task<string> DeleteEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.DeleteEventAsync(e);
        }
        
        public bool EventExistByName(string name) {
            return base.Channel.EventExistByName(name);
        }
        
        public System.Threading.Tasks.Task<bool> EventExistByNameAsync(string name) {
            return base.Channel.EventExistByNameAsync(name);
        }
        
        public bool EventExistByDate(System.DateTime date) {
            return base.Channel.EventExistByDate(date);
        }
        
        public System.Threading.Tasks.Task<bool> EventExistByDateAsync(System.DateTime date) {
            return base.Channel.EventExistByDateAsync(date);
        }
        
        public SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] GetEventBetweenDate(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetEventBetweenDate(d1, d2);
        }
        
        public System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.EventSet[]> GetEventBetweenDateAsync(System.DateTime d1, System.DateTime d2) {
            return base.Channel.GetEventBetweenDateAsync(d1, d2);
        }
        
        public string DeleteAllClosedEvent() {
            return base.Channel.DeleteAllClosedEvent();
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllClosedEventAsync() {
            return base.Channel.DeleteAllClosedEventAsync();
        }
        
        public string UpdateAllEvent() {
            return base.Channel.UpdateAllEvent();
        }
        
        public System.Threading.Tasks.Task<string> UpdateAllEventAsync() {
            return base.Channel.UpdateAllEventAsync();
        }
        
        public string AddPersonToEvent(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.AddPersonToEvent(p);
        }
        
        public System.Threading.Tasks.Task<string> AddPersonToEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.AddPersonToEventAsync(p);
        }
        
        public SyncWorldServiceTEST.ServiceReferenceV1.EventSet[] GetAllEventForPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.GetAllEventForPerson(p);
        }
        
        public System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.EventSet[]> GetAllEventForPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.GetAllEventForPersonAsync(p);
        }
        
        public SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] GetAllContribForEvent(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.GetAllContribForEvent(e);
        }
        
        public System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[]> GetAllContribForEventAsync(SyncWorldServiceTEST.ServiceReferenceV1.EventSet e) {
            return base.Channel.GetAllContribForEventAsync(e);
        }
        
        public SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[] GetAllContribForPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.GetAllContribForPerson(p);
        }
        
        public System.Threading.Tasks.Task<SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet[]> GetAllContribForPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.GetAllContribForPersonAsync(p);
        }
        
        public string DeleteAllContribForPerson(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.DeleteAllContribForPerson(p);
        }
        
        public System.Threading.Tasks.Task<string> DeleteAllContribForPersonAsync(SyncWorldServiceTEST.ServiceReferenceV1.PersonSet p) {
            return base.Channel.DeleteAllContribForPersonAsync(p);
        }
        
        public string AddContrib(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c) {
            return base.Channel.AddContrib(c);
        }
        
        public System.Threading.Tasks.Task<string> AddContribAsync(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c) {
            return base.Channel.AddContribAsync(c);
        }
        
        public string UpdateContrib(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c) {
            return base.Channel.UpdateContrib(c);
        }
        
        public System.Threading.Tasks.Task<string> UpdateContribAsync(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c) {
            return base.Channel.UpdateContribAsync(c);
        }
        
        public string DeleteContrib(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c) {
            return base.Channel.DeleteContrib(c);
        }
        
        public System.Threading.Tasks.Task<string> DeleteContribAsync(SyncWorldServiceTEST.ServiceReferenceV1.ContributionSet c) {
            return base.Channel.DeleteContribAsync(c);
        }
    }
}
